/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.10
 * Generated at: 2020-07-22 09:55:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.zip.GZIPInputStream;
import org.opensolaris.opengrok.analysis.AnalyzerGuru;
import org.opensolaris.opengrok.analysis.Definitions;
import org.opensolaris.opengrok.analysis.FileAnalyzer.Genre;
import org.opensolaris.opengrok.analysis.FileAnalyzerFactory;
import org.opensolaris.opengrok.history.Annotation;
import org.opensolaris.opengrok.index.IndexDatabase;
import org.opensolaris.opengrok.web.DirectoryListing;
import org.json.simple.JSONArray;
import org.opensolaris.opengrok.configuration.messages.Message;
import java.util.SortedSet;
import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
import java.io.File;
import java.io.IOException;
import org.opensolaris.opengrok.configuration.Project;
import org.opensolaris.opengrok.history.HistoryGuru;
import org.opensolaris.opengrok.web.EftarFileReader;
import org.opensolaris.opengrok.web.PageConfig;
import org.opensolaris.opengrok.web.Prefix;
import org.opensolaris.opengrok.web.Util;
import org.opensolaris.opengrok.web.Prefix;
import org.opensolaris.opengrok.Info;
import org.opensolaris.opengrok.web.PageConfig;
import org.opensolaris.opengrok.web.PageConfig;
import java.io.File;
import java.io.IOException;
import org.opensolaris.opengrok.configuration.Project;
import org.opensolaris.opengrok.history.HistoryGuru;
import org.opensolaris.opengrok.web.EftarFileReader;
import org.opensolaris.opengrok.web.PageConfig;
import org.opensolaris.opengrok.web.Prefix;
import org.opensolaris.opengrok.web.Util;
import java.util.EnumSet;
import org.opensolaris.opengrok.web.PageConfig;
import org.opensolaris.opengrok.web.Prefix;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


/* ---------------------- foot.jspf members start --------------------- */
    private static EnumSet<Prefix> needAddDiv = EnumSet.of(
        Prefix.HIST_L, Prefix.XREF_P, Prefix.DIFF_P, Prefix.MORE_P,
        // could NOT find any mapping/reference to those ones:
        Prefix.HIST_S, Prefix.XREF_S, Prefix.DIFF_S, Prefix.MORE_S);
/* ---------------------- foot.jspf members end --------------------- */

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("/foot.jspf", Long.valueOf(1487754254000L));
    _jspx_dependants.put("/minisearch.jspf", Long.valueOf(1487754254000L));
    _jspx_dependants.put("/httpheader.jspf", Long.valueOf(1487754254000L));
    _jspx_dependants.put("/pageheader.jspf", Long.valueOf(1534904724000L));
    _jspx_dependants.put("/mast.jsp", Long.valueOf(1487754254000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("java.util.zip.GZIPInputStream");
    _jspx_imports_classes.add("java.io.BufferedInputStream");
    _jspx_imports_classes.add("java.util.SortedSet");
    _jspx_imports_classes.add("org.opensolaris.opengrok.history.HistoryGuru");
    _jspx_imports_classes.add("org.json.simple.JSONArray");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.util.logging.Level");
    _jspx_imports_classes.add("org.opensolaris.opengrok.analysis.Definitions");
    _jspx_imports_classes.add("org.opensolaris.opengrok.configuration.RuntimeEnvironment");
    _jspx_imports_classes.add("org.opensolaris.opengrok.configuration.Project");
    _jspx_imports_classes.add("org.opensolaris.opengrok.analysis.FileAnalyzerFactory");
    _jspx_imports_classes.add("org.opensolaris.opengrok.Info");
    _jspx_imports_classes.add("org.opensolaris.opengrok.analysis.AnalyzerGuru");
    _jspx_imports_classes.add("java.util.EnumSet");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.EftarFileReader");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("java.io.FileInputStream");
    _jspx_imports_classes.add("java.io.Reader");
    _jspx_imports_classes.add("org.opensolaris.opengrok.configuration.messages.Message");
    _jspx_imports_classes.add("java.io.InputStreamReader");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.opensolaris.opengrok.analysis.FileAnalyzer.Genre");
    _jspx_imports_classes.add("org.opensolaris.opengrok.index.IndexDatabase");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.Prefix");
    _jspx_imports_classes.add("java.io.BufferedReader");
    _jspx_imports_classes.add("java.io.FileReader");
    _jspx_imports_classes.add("org.opensolaris.opengrok.history.Annotation");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.Util");
    _jspx_imports_classes.add("java.io.InputStream");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.DirectoryListing");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.PageConfig");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"error.jsp", false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;


{
    // need to set it here since requesting parameters
    if (request.getCharacterEncoding() == null) {
        request.setCharacterEncoding("UTF-8");
    }
    PageConfig cfg = PageConfig.get(request);
    Annotation annotation = cfg.getAnnotation();
    if (annotation != null) {
        int r = annotation.getWidestRevision();
        int a = annotation.getWidestAuthor();
        cfg.addHeaderData("<style type=\"text/css\">"
            + ".blame .r { width: " + (r == 0 ? 6 : Math.ceil(r * 0.7)) + "em; } "
            + ".blame .a { width: " + (a == 0 ? 6 : Math.ceil(a * 0.7)) + "em; } "
            + "</style>");
    }
}


/* ---------------------- mast.jsp start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);
    String redir = cfg.canProcess();
    if (redir == null || redir.length() > 0) {
        if (redir == null) {            
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
        } else {
            response.sendRedirect(redir);
        }
        return;
    }
    // jel: hmmm - questionable for dynamic content
    long flast = cfg.getLastModified();
    if (request.getDateHeader("If-Modified-Since") >= flast) {
        response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
        return;
    }
    response.setDateHeader("Last-Modified", flast);

    // Use UTF-8 if no encoding is specified in the request
    if (request.getCharacterEncoding() == null) {
        request.setCharacterEncoding("UTF-8");
    }

    // set the default page title
    String path = cfg.getPath();
    cfg.setTitle(cfg.getPathTitle());

    String context = request.getContextPath();
    cfg.getEnv().setUrlPrefix(context + Prefix.SEARCH_R + "?");
}


/* ---------------------- httpheader.jsp start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);
    String styleDir = cfg.getCssDir();
    String ctxPath = request.getContextPath();
    String dstyle = styleDir + '/' + "style.css";
    String pstyle = styleDir + '/' + "print.css";

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n");
      out.write("    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n");
      out.write("<head>\n");
      out.write("<meta name=\"robots\" content=\"noindex,nofollow\" />\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n");
      out.write("<meta name=\"generator\" content=\"{OpenGrok ");
      out.print(Info.getVersion());
      out.write(' ');
      out.write('(');
      out.print(Info.getRevision());
      out.write(")\" />\n");
      out.write("<link rel=\"icon\" href=\"");
      out.print(styleDir);
      out.write("/img/icon.png\" type=\"image/png\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" media=\"all\"\n");
      out.write("    title=\"Default\" href=\"");
      out.print( dstyle );
      out.write("\" />\n");
      out.write("<link rel=\"alternate stylesheet\" type=\"text/css\" media=\"all\"\n");
      out.write("    title=\"Paper White\" href=\"");
      out.print( pstyle );
      out.write("\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/print.css\" media=\"print\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery-ui-1.12.0-custom.min.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery.tooltip.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery.tablesorter.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/searchable-option-list-2.0.2.min.css\" />\n");

if (cfg.getPrefix().equals(Prefix.HIST_L)) {
    out.write("<link rel=\"alternate\" type=\"application/rss+xml\" " +
        "title=\"RSS feed for " + cfg.getPath() + "\" " +
        "href=\"" + ctxPath + Prefix.RSS_P + cfg.getPath() + "\" />");
}

      out.write("<link rel=\"search\" href=\"");
      out.print(ctxPath);
      out.write("/opensearch\"\n");
      out.write("    type=\"application/opensearchdescription+xml\"\n");
      out.write("    title=\"OpenGrok Search for current project(s)\" />\n");
      out.write("<script type=\"text/javascript\">/* <![CDATA[ */\n");
      out.write("    window.contextPath = '");
      out.print( ctxPath );
      out.write("';\n");
      out.write("/* ]]> */\n");
      out.write("</script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/jquery-3.1.0.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/jquery-ui-1.12.0-custom.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/jquery.tablesorter-2.26.6.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/tablesorter.parsers-0.0.1.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/searchable-option-list-2.0.3.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/utils-0.0.6.js\"></script>\n");
      out.write("<title>");
      out.print(cfg.getTitle());
      out.write("</title>");

    out.write(cfg.getHeaderData());

      out.write("</head>");

}
/* ---------------------- httpheader.jsp end --------------------- */

      out.write("<body>\n");
      out.write("<script type=\"text/javascript\">/* <![CDATA[ */\n");
      out.write("    document.rev = getParameter(\"r\");\n");
      out.write("    document.annotate = ");
      out.print( PageConfig.get(request).annotate() );
      out.write(";\n");
      out.write("    document.domReady.push(domReadyMast);\n");
      out.write("    document.pageReady.push(pageReadyMast);\n");
      out.write("/* ]]> */</script>\n");
      out.write("<div id=\"page\">\n");
      out.write("    <div id=\"whole_header\">\n");
      out.write("<div id=\"header\">");

/* ---------------------- pageheader.jspf start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);

      out.write("<a href=\"");
      out.print( request.getContextPath() );
      out.write("/\"><span id=\"MastheadLogo\"></span></a>\n");
      out.print( cfg.getEnv().getConfiguration().getHeaderIncludeFileContent() );
 
}
/* ---------------------- pageheader.jspf end --------------------- */

      out.write("</div>\n");
      out.write("<div id=\"Masthead\">\n");
      out.write("    ");

{
    PageConfig cfg = PageConfig.get(request);
    String path = cfg.getPath();
    String context = request.getContextPath();
    String rev = cfg.getRequestedRevision();

    JSONArray messages = new JSONArray();
    if (cfg.getProject() != null) {
        messages = Util.messagesToJson(cfg.getProject(),
                    RuntimeEnvironment.MESSAGES_MAIN_PAGE_TAG);
    }
    
 if (!messages.isEmpty()) { 
      out.write("<span class=\"important-note\">\n");
      out.write("    ");
 } 
      out.write("<a href=\"");
      out.print( context + Prefix.XREF_P );
      out.write("/\">xref</a>: ");
      out.print( Util
        .breadcrumbPath(context + Prefix.XREF_P, path,'/',"",true,cfg.isDir()) );
 if (rev.length() != 0) { 
      out.write("\n");
      out.write("        (revision ");
      out.print( Util.htmlize(rev) );
      out.write(")\n");
      out.write("        ");
 } 
      out.write("<span id=\"dtag\">\n");
      out.write("    ");

    String dtag = cfg.getDefineTagsIndex();
    if (dtag.length() > 0) {
        
      out.write(' ');
      out.write('(');
      out.print( dtag );
      out.write(')');

    }
    
      out.write("</span>\n");
      out.write("    ");
 if (!messages.isEmpty()) { 
      out.write("</span>\n");
      out.write("    <span class=\"important-note important-note-rounded\"\n");
      out.write("          data-messages='");
      out.print( messages );
      out.write("'>!</span>\n");
      out.write("    ");
 }
}

      out.write("</div>\n");

    /* ---------------------- minisearch.jspf start --------------------- */
{
        PageConfig cfg = PageConfig.get(request);
        String context = request.getContextPath();

      out.write("<form action=\"");
      out.print( context + Prefix.SEARCH_P );
      out.write("\">\n");
      out.write("<div id=\"bar\">\n");
      out.write("    <ul>\n");
      out.write("        <li><a href=\"");
      out.print( context );
      out.write("/\"><span id=\"home\"></span>Home</a></li>");

    if (!cfg.hasHistory()) {
        
      out.write("<li><span id=\"history\"></span><span class=\"c\">History</span></li>");

    } else {
        
      out.write("<li><a href=\"");
      out.print( context + Prefix.HIST_L + cfg.getUriEncodedPath()
            );
      out.write("\"><span id=\"history\"></span>History</a></li>");

    }
    if (!cfg.hasAnnotations() /* || cfg.getPrefix() == Prefix.HIST_S */ ) {
        
      out.write("<li><span class=\"c\"><span class=\"annotate\"></span>Annotate</span></li>");

    } else if (cfg.annotate()) {
        
      out.write("<li><span id=\"toggle-annotate-by-javascript\" style=\"display: none\"><a\n");
      out.write("            href=\"#\" onclick=\"javascript:toggle_annotations(); return false;\"\n");
      out.write("            title=\"Show or hide line annotation(commit revisions,authors).\"\n");
      out.write("            ><span class=\"annotate\"></span>Annotate</a></span><span\n");
      out.write("            id=\"toggle-annotate\"><a href=\"#\"><span class=\"annotate\"></span>\n");
      out.write("            Annotate</a></span></li>");

    } else if (cfg.getPrefix() == Prefix.HIST_L) {
        
      out.write("<li>\n");
      out.write("            <a href=\"#\"\n");
      out.write("               onclick=\"javascript:\n");
      out.write("                           window.location = '");
      out.print( context + Prefix.XREF_P + cfg.getUriEncodedPath() );
      out.write("'\n");
      out.write("                           // taken from get_annotations() from utils.js\n");
      out.write("                           + '?a=true'\n");
      out.write("                           + (document.rev ? '&amp;r=' + encodeURIComponent(document.rev) : '')\n");
      out.write("                           + (window.location.hash ? '&amp;h=' + window.location.hash.substring(1, window.location.hash.length) : '');\n");
      out.write("                           return false;\">\n");
      out.write("                <span class=\"annotate\"></span>\n");
      out.write("                Annotate\n");
      out.write("            </a>\n");
      out.write("        </li>");

    } else {
        
      out.write("<li><a href=\"#\" onclick=\"javascript:get_annotations(); return false;\"\n");
      out.write("            ><span class=\"annotate\"></span>Annotate</a></li>");

    }
    if (!cfg.isDir()) {
        if (cfg.getPrefix() == Prefix.XREF_P) {
        
      out.write("<li><a href=\"#\" onclick=\"javascript:lntoggle();return false;\"\n");
      out.write("            title=\"");
      out.print( "Show or hide line numbers (might be slower if "
                + "file has more than 10 000 lines)."
            );
      out.write("\"><span id=\"line\"></span>Line#</a></li>\n");
      out.write("          <li><a href=\"#\" class=\"scopes-toggle\"\n");
      out.write("            title=\"");
      out.print( "Toggle scopes window."
            );
      out.write("\"><span id=\"line\"></span>Scopes#</a></li><li><a\n");
      out.write("            href=\"#\" id=\"navigate\"\n");
      out.write("            title=\"Show or hide symbol list.\">");
      out.write("<span id=\"defbox\"></span>Navigate#</a></li>");

        }
        
      out.write("<li><a href=\"");
      out.print( context + Prefix.RAW_P + cfg.getUriEncodedPath()
            + (cfg.getRequestedRevision().length() == 0 ? "" : "?r=" + Util.URIEncode(cfg.getRequestedRevision()))
            );
      out.write("\"><span id=\"raw\"></span>Raw</a></li>\n");
      out.write("\t<li><a href=\"");
      out.print( context + Prefix.DOWNLOAD_P + cfg.getUriEncodedPath()
            + (cfg.getRequestedRevision().length() == 0 ? "" : "?r=" + Util.URIEncode(cfg.getRequestedRevision()))
            );
      out.write("\"><span id=\"download\"></span>Download</a></li>\n");
      out.write("\t");

    }
        
      out.write("<li><input type=\"text\" id=\"search\" name=\"q\" class=\"q\" />\n");
      out.write("            <input type=\"submit\" value=\"Search\" class=\"submit\" /></li>");

    Project proj = cfg.getProject();
    String[] vals = cfg.getSearchOnlyIn();
        
      out.write("<li><input type=\"checkbox\" name=\"path\" value='\"");
      out.print( vals[0]
            );
      out.write('"');
      out.write('\'');
      out.write(' ');
      out.print( vals[2] );
      out.write("/> only in <b>");
      out.print( vals[1] );
      out.write("</b></li>\n");
      out.write("    </ul>");

    if (proj != null) {
    
      out.write("<input type=\"hidden\" name=\"project\" value=\"");
      out.print(proj.getDescription());
      out.write("\" />");

    }

      out.write("<input type=\"hidden\" id=\"contextpath\" value=\"");
      out.print(request.getContextPath());
      out.write("\" />\n");
      out.write("</div>\n");
      out.write("        </form>\n");
      out.write("    </div>\n");
      out.write("<div id=\"content\">\n");
 
}
/* ---------------------- minisearch.jspf end --------------------- */


/* ---------------------- mast.jsp end --------------------- */

      out.write("<script type=\"text/javascript\">/* <![CDATA[ */\n");
      out.write("document.pageReady.push(function() { pageReadyList();});\n");
      out.write("/* ]]> */</script>\n");

/* ---------------------- list.jsp start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);
    String rev = cfg.getRequestedRevision();

    File resourceFile = cfg.getResourceFile();
    String path = cfg.getPath();
    String basename = resourceFile.getName();
    String rawPath = request.getContextPath() + Prefix.DOWNLOAD_P + path;
    Reader r = null;
    if (cfg.isDir()) {
        // valid resource is requested
        // mast.jsp assures, that resourceFile is valid and not /
        // see cfg.resourceNotAvailable()
        Project activeProject = Project.getProject(resourceFile);
        String cookieValue = cfg.getRequestedProjectsAsString();
        if (activeProject != null) {
            Set<String>  projects = cfg.getRequestedProjects();
            if (!projects.contains(activeProject.getDescription())) {
                projects.add(activeProject.getDescription());
                // update cookie
                cookieValue = cookieValue.length() == 0
                    ? activeProject.getDescription()
                    : activeProject.getDescription() + ',' + cookieValue;
                Cookie cookie = new Cookie(PageConfig.OPEN_GROK_PROJECT, URLEncoder.encode(cookieValue, "utf-8"));
                // TODO hmmm, projects.jspf doesn't set a path
                cookie.setPath(request.getContextPath() + '/');
                response.addCookie(cookie);
            }
        }
        // requesting a directory listing
        DirectoryListing dl = new DirectoryListing(cfg.getEftarReader());
        List<String> files = cfg.getResourceFileList();
        if (!files.isEmpty()) {
            List<String> readMes = dl.listTo(
                    Util.URIEncodePath(request.getContextPath()),
                    resourceFile, out, path, files);
            File[] catfiles = cfg.findDataFiles(readMes);
            for (int i=0; i < catfiles.length; i++) {
                if (catfiles[i] == null) {
                    continue;
                }


    if (readMes.get(i).toLowerCase().endsWith(".md")) {
    
      out.write("<div id=\"src");
      out.print(i);
      out.write("\" data-markdown>\n");
      out.write("        <div class=\"markdown-heading\">\n");
      out.write("            <h3>");
      out.print( readMes.get(i) );
      out.write("</h3>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"markdown-content\"\n");
      out.write("             data-markdown-download=\"");
      out.print( request.getContextPath() + Prefix.DOWNLOAD_P + Util.URIEncodePath(cfg.getPath() + readMes.get(i)) );
      out.write("\">\n");
      out.write("        </div>\n");
      out.write("        <pre data-markdown-original>");

            Util.dump(out, catfiles[i], catfiles[i].getName().endsWith(".gz"));
        
      out.write("</pre>\n");
      out.write("    </div>\n");
 } else { 
      out.write("<h3>");
      out.print( readMes.get(i) );
      out.write("</h3>\n");
      out.write("    <div id=\"src");
      out.print(i);
      out.write("\">\n");
      out.write("        <pre>");

            Util.dump(out, catfiles[i], catfiles[i].getName().endsWith(".gz"));
        
      out.write("</pre>\n");
      out.write("    </div>\n");

    }

            }
        }
    } else if (rev.length() != 0) {
        // requesting a previous revision
        FileAnalyzerFactory a = AnalyzerGuru.find(basename);
        Genre g = AnalyzerGuru.getGenre(a);
        String error = null;
        if (g == Genre.PLAIN|| g == Genre.HTML || g == null) {
            InputStream in = null;
            try {
                in = HistoryGuru.getInstance()
                    .getRevision(resourceFile.getParent(), basename, rev);
            } catch (Exception e) {
                // fall through to error message
                error = e.getMessage();
            }
            if (in != null) {
                try {
                    if (g == null) {
                        a = AnalyzerGuru.find(in);
                        g = AnalyzerGuru.getGenre(a);
                    }
                    if (g == Genre.DATA || g == Genre.XREFABLE
                        || g == null)
                    {

      out.write("<div id=\"src\">\n");
      out.write("Binary file [Click <a href=\"");
      out.print( rawPath );
      out.write('?');
      out.write('r');
      out.write('=');
      out.print( Util.URIEncode(rev) );
      out.write("\">here</a> to download]\n");
      out.write("</div>");

                    } else {

      out.write("<div id=\"src\">\n");
      out.write("    <pre>");

                        if (g == Genre.PLAIN) {
                            // We don't have any way to get definitions
                            // for old revisions currently.
                            Definitions defs = null;
                            Annotation annotation = cfg.getAnnotation();
                            //not needed yet
                            //annotation.writeTooltipMap(out);
                            r = new InputStreamReader(in);
                            AnalyzerGuru.writeXref(a, r, out, defs,
                                annotation, Project.getProject(resourceFile));
                        } else if (g == Genre.IMAGE) {
    
      out.write("</pre>\n");
      out.write("    <img src=\"");
      out.print( rawPath );
      out.write('?');
      out.write('r');
      out.write('=');
      out.print( Util.URIEncode(rev) );
      out.write("\"/>\n");
      out.write("    <pre>");

                        } else if (g == Genre.HTML) {
                            r = new InputStreamReader(in);
                            Util.dump(out, r);
                        } else {
    
      out.write(" Click <a href=\"");
      out.print( rawPath );
      out.write('?');
      out.write('r');
      out.write('=');
      out.print( Util.URIEncode(rev) );
      out.write("\">download ");
      out.print( basename );
      out.write("</a>");

                        }
                    }
                } catch (IOException e) {
                    error = e.getMessage();
                } finally {
                    if (r != null) {
                        try { r.close(); in = null;}
                        catch (Exception e) { /* ignore */ }
                    }
                    if (in != null) {
                        try { in.close(); }
                        catch (Exception e) { /* ignore */ }
                    }
                }
    
      out.write("</pre>\n");
      out.write("</div>");

            } else {

      out.write("<h3 class=\"error\">Error reading file</h3>");

                if (error != null) {

      out.write("<p class=\"error\">");
      out.print( error );
      out.write("</p>");

                }
            }
        } else if (g == Genre.IMAGE) {

      out.write("<div id=\"src\">\n");
      out.write("    <img src=\"");
      out.print( rawPath );
      out.write('?');
      out.write('r');
      out.write('=');
      out.print( Util.URIEncode(rev) );
      out.write("\"/>\n");
      out.write("</div>");

        } else {

      out.write("<div id=\"src\">\n");
      out.write("Binary file [Click <a href=\"");
      out.print( rawPath );
      out.write('?');
      out.write('r');
      out.write('=');
      out.print( Util.URIEncode(rev) );
      out.write("\">here</a> to download]\n");
      out.write("</div>");

        }
    } else {
        // requesting cross referenced file
        File xrefFile = null;
        if (!cfg.annotate()) {
            xrefFile = cfg.findDataFile();
        }
        if (xrefFile != null) {

      out.write("<div id=\"src\">\n");
      out.write("    <pre>");

            Util.dump(out, xrefFile, xrefFile.getName().endsWith(".gz"));
    
      out.write("</pre>\n");
      out.write("</div>");

        } else {
            // annotate
            BufferedInputStream bin =
                new BufferedInputStream(new FileInputStream(resourceFile));
            try {
                FileAnalyzerFactory a = AnalyzerGuru.find(basename);
                Genre g = AnalyzerGuru.getGenre(a);
                if (g == null) {
                    a = AnalyzerGuru.find(bin);
                    g = AnalyzerGuru.getGenre(a);
                }
                if (g == Genre.IMAGE) {

      out.write("<div id=\"src\">\n");
      out.write("    <img src=\"");
      out.print( rawPath );
      out.write("\"/>\n");
      out.write("</div>");

                } else if ( g == Genre.HTML) {
                    r = new InputStreamReader(bin);
                    Util.dump(out, r);
                } else if (g == Genre.PLAIN) {

      out.write("<div id=\"src\">\n");
      out.write("    <pre>");

                    // We're generating xref for the latest revision, so we can
                    // find the definitions in the index.
                    Definitions defs = IndexDatabase.getDefinitions(resourceFile);
                    Annotation annotation = cfg.getAnnotation();
                    r = new InputStreamReader(bin);
                    AnalyzerGuru.writeXref(a, r, out, defs, annotation,
                        Project.getProject(resourceFile));
    
      out.write("</pre>\n");
      out.write("</div>");

                } else {

      out.write("\n");
      out.write("Click <a href=\"");
      out.print( rawPath );
      out.write("\">download ");
      out.print( basename );
      out.write("</a>");

                }
            } finally {
                if (r != null) {
                    try { r.close(); bin = null; }
                    catch (Exception e) { /* ignore */ }
                }
                if (bin != null) {
                    try { bin.close(); }
                    catch (Exception e) { /* ignore */ }
                }
            }
        }
    }
}
/* ---------------------- list.jsp end --------------------- */


/* ---------------------- foot.jspf start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);

        
      out.write("<div id=\"footer\">\n");
      out.write("<p><a href=\"http://opengrok.github.com/OpenGrok/\"\n");
      out.write(" title=\"Served by OpenGrok\"><span id=\"fti\"></span></a></p>\n");
      out.write("<p>Indexes created ");
      out.print( cfg.getEnv().getDateForLastIndexRun() );
      out.write("</p>\n");
      out.write("    ");
      out.print( cfg.getEnv().getConfiguration().getFooterIncludeFileContent() );

    if (needAddDiv.contains(cfg.getPrefix())) {
        
      out.write("</div>");
 // #content
    }
    // #footer, #page:
    
      out.write("</div>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");

}
/* ---------------------- foot.jspf end --------------------- */

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
