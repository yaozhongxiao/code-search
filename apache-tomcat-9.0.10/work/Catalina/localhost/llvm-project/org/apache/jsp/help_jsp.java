/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.10
 * Generated at: 2020-09-28 14:55:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.opensolaris.opengrok.web.PageConfig;
import org.opensolaris.opengrok.search.SearchEngine;
import org.opensolaris.opengrok.web.Prefix;
import org.opensolaris.opengrok.Info;
import org.opensolaris.opengrok.web.PageConfig;
import org.opensolaris.opengrok.web.PageConfig;
import org.json.simple.JSONArray;
import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
import org.opensolaris.opengrok.configuration.messages.Message;
import java.util.TreeSet;
import java.util.Set;
import java.util.LinkedList;
import org.opensolaris.opengrok.configuration.Group;
import org.opensolaris.opengrok.web.ProjectHelper;
import org.opensolaris.opengrok.web.SearchHelper;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.Map.Entry;
import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import org.opensolaris.opengrok.configuration.Project;
import org.opensolaris.opengrok.search.QueryBuilder;
import org.opensolaris.opengrok.web.PageConfig;
import org.opensolaris.opengrok.web.Prefix;
import org.opensolaris.opengrok.web.Util;
import java.util.EnumSet;
import org.opensolaris.opengrok.web.PageConfig;
import org.opensolaris.opengrok.web.Prefix;

public final class help_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


/* ---------------------- foot.jspf members start --------------------- */
    private static EnumSet<Prefix> needAddDiv = EnumSet.of(
        Prefix.HIST_L, Prefix.XREF_P, Prefix.DIFF_P, Prefix.MORE_P,
        // could NOT find any mapping/reference to those ones:
        Prefix.HIST_S, Prefix.XREF_S, Prefix.DIFF_S, Prefix.MORE_S);
/* ---------------------- foot.jspf members end --------------------- */

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/foot.jspf", Long.valueOf(1487754254000L));
    _jspx_dependants.put("/httpheader.jspf", Long.valueOf(1487754254000L));
    _jspx_dependants.put("/pageheader.jspf", Long.valueOf(1534904724000L));
    _jspx_dependants.put("/menu.jspf", Long.valueOf(1487754254000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.SortedSet");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.ProjectHelper");
    _jspx_imports_classes.add("org.opensolaris.opengrok.search.QueryBuilder");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.opensolaris.opengrok.configuration.messages.Message");
    _jspx_imports_classes.add("org.json.simple.JSONArray");
    _jspx_imports_classes.add("java.util.TreeSet");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("org.opensolaris.opengrok.search.SearchEngine");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.TreeMap");
    _jspx_imports_classes.add("org.opensolaris.opengrok.configuration.RuntimeEnvironment");
    _jspx_imports_classes.add("org.opensolaris.opengrok.configuration.Project");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.Map.Entry");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.Prefix");
    _jspx_imports_classes.add("org.opensolaris.opengrok.Info");
    _jspx_imports_classes.add("java.util.LinkedList");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.Util");
    _jspx_imports_classes.add("org.opensolaris.opengrok.configuration.Group");
    _jspx_imports_classes.add("java.util.EnumSet");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.PageConfig");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.SearchHelper");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"error.jsp", false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;


/* ---------------------- help.jsp start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);
    cfg.setTitle("OpenGrok Help");
}


/* ---------------------- httpheader.jsp start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);
    String styleDir = cfg.getCssDir();
    String ctxPath = request.getContextPath();
    String dstyle = styleDir + '/' + "style.css";
    String pstyle = styleDir + '/' + "print.css";

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n");
      out.write("    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n");
      out.write("<head>\n");
      out.write("<meta name=\"robots\" content=\"noindex,nofollow\" />\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n");
      out.write("<meta name=\"generator\" content=\"{OpenGrok ");
      out.print(Info.getVersion());
      out.write(' ');
      out.write('(');
      out.print(Info.getRevision());
      out.write(")\" />\n");
      out.write("<link rel=\"icon\" href=\"");
      out.print(styleDir);
      out.write("/img/icon.png\" type=\"image/png\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" media=\"all\"\n");
      out.write("    title=\"Default\" href=\"");
      out.print( dstyle );
      out.write("\" />\n");
      out.write("<link rel=\"alternate stylesheet\" type=\"text/css\" media=\"all\"\n");
      out.write("    title=\"Paper White\" href=\"");
      out.print( pstyle );
      out.write("\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/print.css\" media=\"print\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery-ui-1.12.0-custom.min.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery.tooltip.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery.tablesorter.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/searchable-option-list-2.0.2.min.css\" />\n");

if (cfg.getPrefix().equals(Prefix.HIST_L)) {
    out.write("<link rel=\"alternate\" type=\"application/rss+xml\" " +
        "title=\"RSS feed for " + cfg.getPath() + "\" " +
        "href=\"" + ctxPath + Prefix.RSS_P + cfg.getPath() + "\" />");
}

      out.write("<link rel=\"search\" href=\"");
      out.print(ctxPath);
      out.write("/opensearch\"\n");
      out.write("    type=\"application/opensearchdescription+xml\"\n");
      out.write("    title=\"OpenGrok Search for current project(s)\" />\n");
      out.write("<script type=\"text/javascript\">/* <![CDATA[ */\n");
      out.write("    window.contextPath = '");
      out.print( ctxPath );
      out.write("';\n");
      out.write("/* ]]> */\n");
      out.write("</script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/jquery-3.1.0.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/jquery-ui-1.12.0-custom.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/jquery.tablesorter-2.26.6.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/tablesorter.parsers-0.0.1.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/searchable-option-list-2.0.3.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/utils-0.0.6.js\"></script>\n");
      out.write("<title>");
      out.print(cfg.getTitle());
      out.write("</title>");

    out.write(cfg.getHeaderData());

      out.write("</head>");

}
/* ---------------------- httpheader.jsp end --------------------- */

      out.write("<body>\n");
      out.write("    <div id=\"page\">\n");
      out.write("        <div id=\"whole_header\">\n");
      out.write("            <div id=\"header\">");

/* ---------------------- pageheader.jspf start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);

      out.write("<a href=\"");
      out.print( request.getContextPath() );
      out.write("/\"><span id=\"MastheadLogo\"></span></a>\n");
      out.print( cfg.getEnv().getConfiguration().getHeaderIncludeFileContent() );
 
}
/* ---------------------- pageheader.jspf end --------------------- */

      out.write("</div>\n");
      out.write("            <div id=\"Masthead\"></div>\n");
      out.write("        </div>\n");
      out.write("        <div id=\"sbar\">\n");
      out.write("            <div id=\"menu\">");

/* ---------------------- menu.jspf start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);
    ProjectHelper ph = ProjectHelper.getInstance(cfg);
    JSONArray messages;
    Set<Project> projects = ph.getAllProjects();
    if (projects == null) {
        projects = new TreeSet<>();
    }
    int projectsSize = ph.getAllUngrouped().size();
    if (ph.getGroups().size() > 0 && ph.getAllUngrouped().size() > 0)
        projectsSize++;
    for (Group group : ph.getGroups()) {
        projectsSize++;
        projectsSize += ph.getAllGrouped(group).size();
    }
    TreeMap<String, String> pMap = new TreeMap<>();
    QueryBuilder queryParams = cfg.getQueryBuilder();
    if (projects.size() != 0) {
        for (Project p : projects) {
            String name = p.getDescription();
            String esc = Util.formQuoteEscape(p.getDescription());
            pMap.put(name, esc);
        }

      out.write("<script type=\"text/javascript\">/* <![CDATA[ */\n");
      out.write("    document.xrefPath = '");
      out.print( request.getContextPath() + Prefix.XREF_P
    );
      out.write("';document.domReady.push(function() { domReadyMenu(); });\n");
      out.write("/* ]]> */\n");
      out.write("</script>");

    }

      out.write("<form action=\"");
      out.print( request.getContextPath() );
      out.write("/search\" id=\"sbox\">\n");
      out.write("<div id=\"qtbl\">\n");
      out.write("<table>\n");
      out.write("    <tr>\n");
      out.write("        <td><label for=\"s1\" title=\"The text token(s) or other fields to be found (lucene query, this is not full text!)\">Full&nbsp;Search</label></td>\n");
      out.write("        <td><input tabindex=\"1\" class=\"q\" name=\"q\" id=\"q\" type=\"text\" value=\"");
      out.print(
                Util.formQuoteEscape(queryParams.getFreetext()) );
      out.write("\"/></td>\n");
      out.write("    </tr>\n");
      out.write("    <tr>\n");
      out.write("\t    <td><label for=\"s2\" title=\"Definition of function/variable/class\">Definition</label></td>\n");
      out.write("        <td><input class=\"q\" tabindex=\"2\" name=\"defs\" id=\"defs\" type=\"text\" value=\"");
      out.print(
            Util.formQuoteEscape(queryParams.getDefs()) );
      out.write("\"/></td>\n");
      out.write("    </tr>\n");
      out.write("    <tr>\n");
      out.write("        <td><label for=\"s3\" title=\"Usage of function/variable/class\">Symbol</label></td>\n");
      out.write("        <td><input class=\"q\" tabindex=\"3\" name=\"refs\" id=\"refs\" type=\"text\" value=\"");
      out.print(
            Util.formQuoteEscape(queryParams.getRefs()) );
      out.write("\"/></td>\n");
      out.write("    </tr>\n");
      out.write("    <tr>\n");
      out.write("        <td><label for=\"s4\" title=\"path or parts of it, no need to use dividers\">File&nbsp;Path</label></td>\n");
      out.write("        <td><input class=\"q\" tabindex=\"4\" name=\"path\" id=\"path\" type=\"text\" value=\"");
      out.print(
            Util.formQuoteEscape(queryParams.getPath()) );
      out.write("\"/></td>\n");
      out.write("    </tr>\n");
      out.write("    <tr>\n");
      out.write("        <td><label for=\"s5\" title=\"Search in log messages\">History</label></td>\n");
      out.write("        <td><input class=\"q\" tabindex=\"5\" name=\"hist\" id=\"hist\" type=\"text\" value=\"");
      out.print(
            Util.formQuoteEscape(queryParams.getHist()) );
      out.write("\"/></td>\n");
      out.write("    </tr>\n");
      out.write("    <tr>\n");
      out.write("        <td><label for=\"s5\">Type</label></td>\n");
      out.write("        <td><select class=\"q\" tabindex=\"6\" name=\"type\" id=\"type\">");

                String selection = queryParams.getType();
                
      out.write("<option value=\"\">Any</option>");

                for (Map.Entry<String, String> d : SearchHelper.getFileTypeDescriptions()) {
                    
      out.write("<option value=\"");
      out.print( Util.formQuoteEscape(d.getKey()) );
      out.write('"');

                    if (d.getKey().equals(selection)) {
                        
      out.write(" selected=\"selected\"");

                    }
                    
      out.write('>');
      out.print( Util.htmlize(d.getValue()) );
      out.write("</option>");

                }
            
      out.write("</select>\n");
      out.write("        </td>\n");
      out.write("    </tr>\n");
      out.write("</table>\n");
      out.write("<div id=\"form-controls\">\n");
      out.write("    <input tabindex=\"9\" class=\"submit btn\" type=\"submit\" value=\"Search\"/>\n");
      out.write("    <input tabindex=\"10\" class=\"submit btn\" onclick=\"javascript: clearSearchFrom();\"\n");
      out.write("           type=\"button\" value=\"Clear\"/>\n");
      out.write("    <a href=\"help.jsp\" target=\"_blank\" class=\"help btn\" title=\"Help\" tabindex=\"11\" />Help</a>\n");
      out.write("</div>\n");
      out.write("</div>");

    if (projects.size() != 0) {

      out.write("<div id=\"ptbl\">\n");
      out.write("    <p><label for=\"project\">In Project(s)</label> \n");
      out.write("        <button tabindex=\"6\" type=\"button\"\n");
      out.write("        onclick=\"javascript: selectAllProjects(); return false;\"\n");
      out.write("        >select all</button>&nbsp;<button tabindex=\"7\" type=\"button\"\n");
      out.write("        onclick=\"javascript: invertAllProjects(); return false;\"\n");
      out.write("        >invert selection</button>&nbsp;<button tabindex=\"8\" type=\"button\"\n");
      out.write("        onclick=\"javascript: deselectAllProjects(); return false;\"\n");
      out.write("        >clear</button></p>\n");
      out.write("    <select tabindex=\"8\" class=\"q\" id=\"project\"\n");
      out.write("        name=\"project\" multiple=\"multiple\" size=\"");
      out.print(
        Math.min(15, projectsSize) );
      out.write('"');
      out.write('>');

        SortedSet<String> pRequested = cfg.getRequestedProjects();
        for ( Group group : ph.getGroups() ) {
            Set<Project> groupProjects = ph.getAllGrouped(group);
            if ( groupProjects.size() > 0) {
                
      out.write("<optgroup label=\"");
      out.print( group.getName() );
      out.write('"');
      out.write('>');

                for (Project p : groupProjects) {
                // TODO below "selected" has no effect if one refreshes the page
                // with F5

                
      out.write("<option value=\"");
      out.print( p.getDescription() );
      out.write('"');

                    if (pRequested.contains(p.getDescription())) {
                        
      out.write(" selected=\"selected\"");

                    }
                    if (!(messages = Util.messagesToJson(p)).isEmpty()) {
                    
      out.write(" data-messages='");
      out.print( messages );
      out.write('\'');
      out.write(' ');

                        }
                    
      out.write('>');
      out.print( Util.formQuoteEscape(p.getDescription()) );
      out.write("</option>");

                }
                
      out.write("</optgroup>");

            }
        }
  
        if (ph.getGroups().size() > 0 && ph.getAllUngrouped().size() > 0) {
            
      out.write("<optgroup label=\"Other\">");

        }
        for ( Project p : ph.getAllUngrouped()) {
        
      out.write("<option value=\"");
      out.print( p.getDescription() );
      out.write('"');

            if (pRequested.contains(p.getDescription())) {
                
      out.write(" selected=\"selected\"");

            }
            if (!(messages = Util.messagesToJson(p)).isEmpty()) {
                
      out.write(" data-messages='");
      out.print( messages );
      out.write('\'');
      out.write(' ');

            }
            
      out.write('>');
      out.print( Util.formQuoteEscape(p.getDescription()) );
      out.write("</option>");

        }
        if (ph.getGroups().size() > 0 && ph.getAllUngrouped().size() > 0) {
            
      out.write("</optgroup>");

        }


    
      out.write("</select>\n");
      out.write("</div>");

    }
    
      out.write("<div id=\"ltbl\">\n");
      out.write("    <!-- filled with javascript -->\n");
      out.write("</div>\n");
      out.write("</form>\n");
      out.write("<div class=\"clearfix\"></div>\n");

}
/* ---------------------- menu.jspf end --------------------- */

      out.write("</div>\n");
      out.write("        </div>\n");
      out.write("        <div id=\"help\">\n");
      out.write("\n");
      out.write("<h4>Examples:</h4>\n");
      out.write("<pre class=\"example\">\n");
      out.write("\n");
      out.write("To find where setResourceMonitors is defined:\n");
      out.write("<a href=\"search?q=&amp;defs=setResourceMonitors\">defs:setResourceMonitors</a>\n");
      out.write("\n");
      out.write("To find files that use sprintf in usr/src/cmd/cmd-inet/usr.sbin/:\n");
      out.write("<a href=\"search?refs=sprintf&amp;path=usr%2Fsrc%2Fcmd%2Fcmd-inet%2Fusr.sbin%2F\"\n");
      out.write(">refs:sprintf path:usr/src/cmd/cmd-inet/usr.sbin</a>\n");
      out.write("\n");
      out.write("To find assignments to variable foo:\n");
      out.write("<a href=\"search?q=%22foo+%3D%22\">\"foo =\"</a>\n");
      out.write("\n");
      out.write("To find Makefiles where pstack binary is being built:\n");
      out.write("<a href=\"search?q=pstack&amp;path=Makefile\">pstack path:Makefile</a>\n");
      out.write("\n");
      out.write("to search for phrase \"Bill Joy\":\n");
      out.write("<a href=\"search?q=%22Bill+Joy%22\">\"Bill Joy\"</a>\n");
      out.write("\n");
      out.write("To find perl files that do not use /usr/bin/perl but something else:\n");
      out.write("<a href=\"search?q=-%22%2Fusr%2Fbin%2Fperl%22+%2B%22%2Fbin%2Fperl%22\"\n");
      out.write(">-\"/usr/bin/perl\" +\"/bin/perl\"</a>\n");
      out.write("\n");
      out.write("To find all strings beginning with foo use the wildcard:\n");
      out.write("<a href=\"search?q=foo*\">foo*</a>\n");
      out.write("\n");
      out.write("To find all files which have . c in their name (dot is a token!):\n");
      out.write("<a href=\"search?path=%22. c%22\">\". c\"</a>\n");
      out.write("\n");
      out.write("To find all files which start with \"ma\" and then have only alphabet characters do:\n");
      out.write("<a href=\"search?path=/ma[a-zA-Z]*/\">path:/ma[a-zA-Z]*/</a>\n");
      out.write("\n");
      out.write("To find all main methods in all files analyzed by C analyzer (so .c, .h, ...) do:\n");
      out.write("<a href=\"search?q=main&type=c\">main type:c</a>\n");
      out.write("</pre>\n");
      out.write("\n");
      out.write("<h4>More info:</h4>\n");
      out.write("A <dfn>Query</dfn> is a series of clauses. A clause may be prefixed by:\n");
      out.write("<ul>\n");
      out.write("    <li>a plus \"<b>+</b>\" or a minus \"<b>-</b>\" sign, indicating that the clause\n");
      out.write("        is required or prohibited respectively; or</li>\n");
      out.write("    <li>a <dfn>term</dfn> followed by a colon \"<b>:</b>\", indicating the\n");
      out.write("        <dfn>field</dfn> to be searched. This enables one to construct queries\n");
      out.write("        which search multiple <dfn>fields</dfn>.</li>\n");
      out.write("</ul>\n");
      out.write("<p>A <dfn>clause</dfn> may be either:</p>\n");
      out.write("<ul>\n");
      out.write("    <li>a <dfn>term</dfn>, indicating all the documents that contain this term;\n");
      out.write("        or</li>\n");
      out.write("    <li>a <dfn>phrase</dfn> - group of words surrounded by double quotes\n");
      out.write("        <b>\" \"</b>, e.g. \"hello dolly\"  </li>\n");
      out.write("    <li>a nested query, enclosed in parentheses \"<b>(</b>\" \"<b>)</b>\" (also\n");
      out.write("        called query/field <dfn>grouping</dfn>) . Note that this may be used\n");
      out.write("        with a +/- prefix to require any of a set of terms. </li>\n");
      out.write("    <li>boolean <dfn>operators</dfn> which allow terms to be combined through\n");
      out.write("        logic operators. Supported are <b>AND</b>(<b>&amp;&amp;</b>), \"<b>+</b>\",\n");
      out.write("        <b>OR</b>(<b>||</b>), <b>NOT</b>(<b>!</b>) and \"<b>-</b>\" (Note: they\n");
      out.write("        must be ALL CAPS).</li>\n");
      out.write("</ul>\n");
      out.write("<p>Regular Expression, Wildcard, Fuzzy, Proximity &amp; Range Searches:</p>\n");
      out.write("<ul>\n");
      out.write("    <li>to perform a regular expression search use the \"<b>/</b>\" enclosure,\n");
      out.write("        e.g.  /[mb]an/ - will search for man or for ban;<br/>\n");
      out.write("        NOTE: path field search escapes \"/\" by default, so it only supports\n");
      out.write("        regexps when the search string <u>starts and ends</u> with \"/\".<br/>\n");
      out.write("        More info can be found on <a href=\"http://lucene.apache.org/core/");
      out.print(SearchEngine.LUCENE_VERSION_HELP);
      out.write("/core/org/apache/lucene/util/automaton/RegExp.html?is-external=true\">Lucene regexp page</a>.\n");
      out.write("    </li>\n");
      out.write("    <li>to perform a single character wildcard search use the \"<b>?</b>\" symbol,\n");
      out.write("        e.g.  te?t</li>\n");
      out.write("    <li>to perform a multiple character wildcard search use the \"<b>*</b>\"\n");
      out.write("        symbol, e.g. test* or te*t</li>\n");
      out.write("    <li>you can use a * or ? symbol as the first character of a search\n");
      out.write("        (unless not enabled using indexer option -a).</li>\n");
      out.write("    <li>to do a fuzzy search (find words similar in spelling, based on the\n");
      out.write("        Levenshtein Distance, or Edit Distance algorithm) use the tilde,\n");
      out.write("        \"<b>~</b>\", e.g. rcs~ </li>\n");
      out.write("    <li>to do a proximity search use the tilde, \"~\", symbol at the end of a\n");
      out.write("        Phrase. For example to search for a \"opengrok\" and \"help\" within 10\n");
      out.write("        words of each other enter: \"opengrok help\"~10 </li>\n");
      out.write("    <li>range queries allow one to match documents whose field(s) values are\n");
      out.write("        between the lower and upper bound specified by the Range Query. Range\n");
      out.write("        Queries can be inclusive or exclusive of the upper and lower bounds.\n");
      out.write("        Sorting is done lexicographically. Inclusive queries are denoted by\n");
      out.write("        square brackets <b>[ ]</b> , exclusive by curly brackets <b>{ }</b>.\n");
      out.write("        For example: title:{Aida TO Carmen} - will find all documents between\n");
      out.write("        Aida to Carmen, exclusive of Aida and Carmen. </li>\n");
      out.write("</ul>\n");
      out.write("\n");
      out.write("<a id=\"escaping\"><dfn>Escaping special characters:</dfn></a>\n");
      out.write("<p>\n");
      out.write("    Opengrok supports escaping special characters that are part of the query\n");
      out.write("    syntax. Current special characters are:<br/>\n");
      out.write("    <b>+ - &amp;&amp; || ! ( ) { } [ ] ^ \" ~ * ? : \\ / </b><br/>\n");
      out.write("    To escape these character use the \\ before the character. For example to\n");
      out.write("    search for <b>(1+1):2</b> use the query: <b>\\(1\\+1\\)\\:2</b>\n");
      out.write("</p>\n");
      out.write("<p>\n");
      out.write("    NOTE on analyzers: Indexed words are made up of Alpha-Numeric and Underscore\n");
      out.write("    characters. One letter words are usually not indexed as symbols!<br/>\n");
      out.write("    Most other characters (including single and double quotes) are treated as\n");
      out.write("    \"spaces/whitespace\" (so even if you escape them, they will not be found, since\n");
      out.write("    most analyzers ignore them). <br/>\n");
      out.write("    The exceptions are: <b>@ $ % ^ &amp; = ? . :</b> which are mostly indexed as\n");
      out.write("    separate words.<br/>\n");
      out.write("    Because some of them are part of the query syntax, they must be escaped with a\n");
      out.write("    reverse slash as noted above.<br/>\n");
      out.write("    So searching for <b>\\+1</b> or <b>\\+ 1</b> will both find <b>+1</b> and <b>+ 1</b>.\n");
      out.write("</p>\n");
      out.write("\n");
      out.write("<p>Valid <dfn>FIELDs</dfn> are</p>\n");
      out.write("<dl class=\"fields\">\n");
      out.write("    <dt>full</dt>\n");
      out.write("    <dd>Search through all text tokens (words,strings,identifiers,numbers) in index.</dd>\n");
      out.write("\n");
      out.write("    <dt>defs</dt>\n");
      out.write("    <dd>Only finds symbol definitions (where e.g. a variable (function, ...) is defined).</dd>\n");
      out.write("\n");
      out.write("    <dt>refs</dt>\n");
      out.write("    <dd>Only finds symbols (e.g. methods, classes, functions, variables).</dd>\n");
      out.write("\n");
      out.write("    <dt>path</dt>\n");
      out.write("    <dd>path of the source file (no need to use dividers, or if, then use \"/\" - Windows users, \"\\\" is an escape key in Lucene query syntax! <br/>Please don't use \"\\\", or replace it with \"/\").<br/>Also note that if you want just exact path, enclose it in \"\", e.g. \"src/mypath\", otherwise dividers will be removed and you get more hits.</dd>\n");
      out.write("\n");
      out.write("    <dt>hist</dt>\n");
      out.write("    <dd>History log comments.</dd>\n");
      out.write("\n");
      out.write("    <dt>type</dt>\n");
      out.write("    <dd>Type of analyzer used to scope down to certain file types (e.g. just C sources).<br/>Current mappings: ");
      out.print(SearchHelper.getFileTypeDescriptions().toString());
      out.write("</dd>\n");
      out.write("</dl>\n");
      out.write("\n");
      out.write("<p>\n");
      out.write("    The term (phrases) can be boosted (making it more relevant) using a caret\n");
      out.write("    <b>^</b> , e.g. help^4 opengrok - will make term help boosted\n");
      out.write("</p>\n");
      out.write("\n");
      out.write("<p>Opengrok search is powered by <a href=\"http://lucene.apache.org/\">Lucene</a>,\n");
      out.write("for more detail on query syntax refer to <a href=\"http://lucene.apache.org/core/");
      out.print(SearchEngine.LUCENE_VERSION_HELP);
      out.write("/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package.description\">Lucene docs</a>.\n");
      out.write("</p>\n");
      out.write("\n");
      out.write("<h4>Intelligence Window</h4>\n");
      out.write("<p>\n");
      out.write("Key \"1\" toggles <dfn>Intelligence Window</dfn>.  It gives the user many helper actions on the last symbol pointed by the mouse cursor.\n");
      out.write("</p>\n");
      out.write("<img src=\"");
      out.print( PageConfig.get(request).getCssDir() );
      out.write("/img/intelli-window.png\"/>\n");
      out.write("\n");
      out.write("<h5>Symbol Highlighting</h5>\n");
      out.write("<p>\n");
      out.write("Key \"2\" toggles highlighting of the last symbol pointed by the mouse cursor.  This functionality is also accessible via the <dfn>Intelligence Window</dfn>.\n");
      out.write("</p>\n");
      out.write("<p>\n");
      out.write("Key \"3\" toggles unhighlighting all symbols. This functionality is also accessible via the <dfn>Intelligence Window</dfn>.\n");
      out.write("</p>\n");
      out.write("<img src=\"");
      out.print( PageConfig.get(request).getCssDir() );
      out.write("/img/symbol-highlighting.png\"/>\n");
      out.write("\n");
      out.write("<p>\n");
      out.write("    You can close the intelligence window either by mouse in the right upper corner or by keyboard with \"Esc\" key.\n");
      out.write("</p>\n");
      out.write("\n");
      out.write("<h5>Symbol jumping</h5>\n");
      out.write("<p>\n");
      out.write("By 'n' for next and 'b' for back you can jump between the symbols easily only with keyboard. When there is no symbol highlighted then the jump\n");
      out.write("is made to the next symbol in the file from the current one. If you have highlighted a specific symbol then the jump is done only among the highlighted symbols.\n");
      out.write("</p>\n");
      out.write("\n");
      out.write("<h4>Diff jumper</h4>\n");
      out.write("\n");
      out.write("<p>\n");
      out.write("The OpenGrok also provides an easy way how to jump through the large diffs finding the interesting pieces of code. In the diff mode you can enable diff jumper by hitting the \"jumper\" button.\n");
      out.write("</p>\n");
      out.write("<img src=\"");
      out.print( PageConfig.get(request).getCssDir() );
      out.write("/img/diff-jumper.png\"/>\n");
      out.write("\n");
      out.write("<h5>Mouse and keyboard navigation</h5>\n");
      out.write("<p>\n");
      out.write("You can then use your mouse to intuitively navigate yourself through the diff. Also there is a convenient shortcut for moving on your keyboard,\n");
      out.write("you can use 'n' for next and 'b' for back to jump over to the next chunk. This is available even when the jumper window is not opened.\n");
      out.write("</p>\n");
      out.write("<img src=\"");
      out.print( PageConfig.get(request).getCssDir() );
      out.write("/img/diff-jumping.png\"/>\n");
      out.write("\n");
      out.write("        </div>\n");

/* ---------------------- help.jsp end --------------------- */


/* ---------------------- foot.jspf start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);

        
      out.write("<div id=\"footer\">\n");
      out.write("<p><a href=\"http://opengrok.github.com/OpenGrok/\"\n");
      out.write(" title=\"Served by OpenGrok\"><span id=\"fti\"></span></a></p>\n");
      out.write("<p>Indexes created ");
      out.print( cfg.getEnv().getDateForLastIndexRun() );
      out.write("</p>\n");
      out.write("    ");
      out.print( cfg.getEnv().getConfiguration().getFooterIncludeFileContent() );

    if (needAddDiv.contains(cfg.getPrefix())) {
        
      out.write("</div>");
 // #content
    }
    // #footer, #page:
    
      out.write("</div>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");

}
/* ---------------------- foot.jspf end --------------------- */

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
