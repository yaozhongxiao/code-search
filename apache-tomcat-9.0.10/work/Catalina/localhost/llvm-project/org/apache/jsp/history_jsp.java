/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.10
 * Generated at: 2020-07-22 08:06:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.opensolaris.opengrok.web.Util;
import org.opensolaris.opengrok.history.HistoryGuru;
import java.io.File;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Set;
import java.util.regex.Pattern;
import org.opensolaris.opengrok.history.History;
import org.opensolaris.opengrok.history.HistoryEntry;
import org.opensolaris.opengrok.history.HistoryException;
import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
import org.opensolaris.opengrok.web.Prefix;
import org.opensolaris.opengrok.Info;
import org.opensolaris.opengrok.web.PageConfig;
import org.opensolaris.opengrok.web.PageConfig;
import java.io.File;
import java.io.IOException;
import org.opensolaris.opengrok.configuration.Project;
import org.opensolaris.opengrok.history.HistoryGuru;
import org.opensolaris.opengrok.web.EftarFileReader;
import org.opensolaris.opengrok.web.PageConfig;
import org.opensolaris.opengrok.web.Prefix;
import org.opensolaris.opengrok.web.Util;
import java.util.EnumSet;
import org.opensolaris.opengrok.web.PageConfig;
import org.opensolaris.opengrok.web.Prefix;

public final class history_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


/* ---------------------- foot.jspf members start --------------------- */
    private static EnumSet<Prefix> needAddDiv = EnumSet.of(
        Prefix.HIST_L, Prefix.XREF_P, Prefix.DIFF_P, Prefix.MORE_P,
        // could NOT find any mapping/reference to those ones:
        Prefix.HIST_S, Prefix.XREF_S, Prefix.DIFF_S, Prefix.MORE_S);
/* ---------------------- foot.jspf members end --------------------- */

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/foot.jspf", Long.valueOf(1487754254000L));
    _jspx_dependants.put("/minisearch.jspf", Long.valueOf(1487754254000L));
    _jspx_dependants.put("/httpheader.jspf", Long.valueOf(1487754254000L));
    _jspx_dependants.put("/pageheader.jspf", Long.valueOf(1534904724000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.text.Format");
    _jspx_imports_classes.add("org.opensolaris.opengrok.history.HistoryEntry");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.EftarFileReader");
    _jspx_imports_classes.add("org.opensolaris.opengrok.history.HistoryGuru");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("org.opensolaris.opengrok.history.HistoryException");
    _jspx_imports_classes.add("org.opensolaris.opengrok.configuration.RuntimeEnvironment");
    _jspx_imports_classes.add("org.opensolaris.opengrok.configuration.Project");
    _jspx_imports_classes.add("org.opensolaris.opengrok.history.History");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.Prefix");
    _jspx_imports_classes.add("org.opensolaris.opengrok.Info");
    _jspx_imports_classes.add("java.util.regex.Pattern");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.Util");
    _jspx_imports_classes.add("java.util.EnumSet");
    _jspx_imports_classes.add("org.opensolaris.opengrok.web.PageConfig");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"error.jsp", false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

/* ---------------------- history.jsp start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);

    // Need to set the title before inlcuding httpheader.jspf
    cfg.setTitle(cfg.getHistoryTitle());
}


/* ---------------------- httpheader.jsp start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);
    String styleDir = cfg.getCssDir();
    String ctxPath = request.getContextPath();
    String dstyle = styleDir + '/' + "style.css";
    String pstyle = styleDir + '/' + "print.css";

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n");
      out.write("    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n");
      out.write("<head>\n");
      out.write("<meta name=\"robots\" content=\"noindex,nofollow\" />\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n");
      out.write("<meta name=\"generator\" content=\"{OpenGrok ");
      out.print(Info.getVersion());
      out.write(' ');
      out.write('(');
      out.print(Info.getRevision());
      out.write(")\" />\n");
      out.write("<link rel=\"icon\" href=\"");
      out.print(styleDir);
      out.write("/img/icon.png\" type=\"image/png\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" media=\"all\"\n");
      out.write("    title=\"Default\" href=\"");
      out.print( dstyle );
      out.write("\" />\n");
      out.write("<link rel=\"alternate stylesheet\" type=\"text/css\" media=\"all\"\n");
      out.write("    title=\"Paper White\" href=\"");
      out.print( pstyle );
      out.write("\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/print.css\" media=\"print\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery-ui-1.12.0-custom.min.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery.tooltip.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/jquery.tablesorter.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(styleDir);
      out.write("/searchable-option-list-2.0.2.min.css\" />\n");

if (cfg.getPrefix().equals(Prefix.HIST_L)) {
    out.write("<link rel=\"alternate\" type=\"application/rss+xml\" " +
        "title=\"RSS feed for " + cfg.getPath() + "\" " +
        "href=\"" + ctxPath + Prefix.RSS_P + cfg.getPath() + "\" />");
}

      out.write("<link rel=\"search\" href=\"");
      out.print(ctxPath);
      out.write("/opensearch\"\n");
      out.write("    type=\"application/opensearchdescription+xml\"\n");
      out.write("    title=\"OpenGrok Search for current project(s)\" />\n");
      out.write("<script type=\"text/javascript\">/* <![CDATA[ */\n");
      out.write("    window.contextPath = '");
      out.print( ctxPath );
      out.write("';\n");
      out.write("/* ]]> */\n");
      out.write("</script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/jquery-3.1.0.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/jquery-ui-1.12.0-custom.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/jquery.tablesorter-2.26.6.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/tablesorter.parsers-0.0.1.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/searchable-option-list-2.0.3.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctxPath);
      out.write("/js/utils-0.0.6.js\"></script>\n");
      out.write("<title>");
      out.print(cfg.getTitle());
      out.write("</title>");

    out.write(cfg.getHeaderData());

      out.write("</head>");

}
/* ---------------------- httpheader.jsp end --------------------- */


{
    PageConfig cfg = PageConfig.get(request);
    String path = cfg.getPath();

    if (path.length() > 0) {
        File f = cfg.getResourceFile();
        History hist = null;
        try {
            hist = HistoryGuru.getInstance().getHistoryUI(f);
        } catch (Exception e) {
            // should not happen
            
      out.write("<h3>Problem</h3><p class=\"error\">");
      out.print( e.getMessage() );
      out.write("</p>");

        }
        if (hist != null) {
            request.setAttribute("history.jsp-hist", hist);

      out.write("<body>\n");
      out.write("<script type=\"text/javascript\">/* <![CDATA[ */\n");
      out.write("    document.rev = getParameter(\"r\");\n");
      out.write("    document.annotate = ");
      out.print( PageConfig.get(request).annotate() );
      out.write(";\n");
      out.write("    document.domReady.push(domReadyMast);\n");
      out.write("    document.pageReady.push(pageReadyMast);\n");
      out.write("/* ]]> */</script>\n");
      out.write("<div id=\"page\">\n");
      out.write("    <div id=\"whole_header\">\n");
      out.write("        <div id=\"header\">\n");

        }
    }
}
{
    if (request.getAttribute("history.jsp-hist") != null) {


/* ---------------------- pageheader.jspf start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);

      out.write("<a href=\"");
      out.print( request.getContextPath() );
      out.write("/\"><span id=\"MastheadLogo\"></span></a>\n");
      out.print( cfg.getEnv().getConfiguration().getHeaderIncludeFileContent() );
 
}
/* ---------------------- pageheader.jspf end --------------------- */


    }
}
{
    PageConfig cfg = PageConfig.get(request);
    String context = request.getContextPath();
    String path = cfg.getPath();

    History hist = null;
    if ((hist = (History) request.getAttribute("history.jsp-hist")) != null) {

        int start = cfg.getSearchStart();
        int max = cfg.getSearchMaxItems();
        int totalHits = hist.getHistoryEntries().size();
        int thispage = Math.min(totalHits - start, max);

        // We have a lots of results to show: create a slider for them
        request.setAttribute("history.jsp-slider", Util.createSlider(start, max, totalHits, request));

      out.write("</div>\n");
      out.write("        <div id=\"Masthead\">History log of \n");
      out.write("        ");
      out.print( Util.breadcrumbPath(context + Prefix.XREF_P, path,'/',"",true,cfg.isDir()) );
      out.write("\n");
      out.write("        (Results <b> ");
      out.print( start + 1 );
      out.write(' ');
      out.write('-');
      out.write(' ');
      out.print( thispage + start
            );
      out.write("</b> of <b>");
      out.print( totalHits );
      out.write("</b>)\n");
      out.write("        </div>\n");

    }
}
{
    if (request.getAttribute("history.jsp-hist") != null) {


    /* ---------------------- minisearch.jspf start --------------------- */
{
        PageConfig cfg = PageConfig.get(request);
        String context = request.getContextPath();

      out.write("<form action=\"");
      out.print( context + Prefix.SEARCH_P );
      out.write("\">\n");
      out.write("<div id=\"bar\">\n");
      out.write("    <ul>\n");
      out.write("        <li><a href=\"");
      out.print( context );
      out.write("/\"><span id=\"home\"></span>Home</a></li>");

    if (!cfg.hasHistory()) {
        
      out.write("<li><span id=\"history\"></span><span class=\"c\">History</span></li>");

    } else {
        
      out.write("<li><a href=\"");
      out.print( context + Prefix.HIST_L + cfg.getUriEncodedPath()
            );
      out.write("\"><span id=\"history\"></span>History</a></li>");

    }
    if (!cfg.hasAnnotations() /* || cfg.getPrefix() == Prefix.HIST_S */ ) {
        
      out.write("<li><span class=\"c\"><span class=\"annotate\"></span>Annotate</span></li>");

    } else if (cfg.annotate()) {
        
      out.write("<li><span id=\"toggle-annotate-by-javascript\" style=\"display: none\"><a\n");
      out.write("            href=\"#\" onclick=\"javascript:toggle_annotations(); return false;\"\n");
      out.write("            title=\"Show or hide line annotation(commit revisions,authors).\"\n");
      out.write("            ><span class=\"annotate\"></span>Annotate</a></span><span\n");
      out.write("            id=\"toggle-annotate\"><a href=\"#\"><span class=\"annotate\"></span>\n");
      out.write("            Annotate</a></span></li>");

    } else if (cfg.getPrefix() == Prefix.HIST_L) {
        
      out.write("<li>\n");
      out.write("            <a href=\"#\"\n");
      out.write("               onclick=\"javascript:\n");
      out.write("                           window.location = '");
      out.print( context + Prefix.XREF_P + cfg.getUriEncodedPath() );
      out.write("'\n");
      out.write("                           // taken from get_annotations() from utils.js\n");
      out.write("                           + '?a=true'\n");
      out.write("                           + (document.rev ? '&amp;r=' + encodeURIComponent(document.rev) : '')\n");
      out.write("                           + (window.location.hash ? '&amp;h=' + window.location.hash.substring(1, window.location.hash.length) : '');\n");
      out.write("                           return false;\">\n");
      out.write("                <span class=\"annotate\"></span>\n");
      out.write("                Annotate\n");
      out.write("            </a>\n");
      out.write("        </li>");

    } else {
        
      out.write("<li><a href=\"#\" onclick=\"javascript:get_annotations(); return false;\"\n");
      out.write("            ><span class=\"annotate\"></span>Annotate</a></li>");

    }
    if (!cfg.isDir()) {
        if (cfg.getPrefix() == Prefix.XREF_P) {
        
      out.write("<li><a href=\"#\" onclick=\"javascript:lntoggle();return false;\"\n");
      out.write("            title=\"");
      out.print( "Show or hide line numbers (might be slower if "
                + "file has more than 10 000 lines)."
            );
      out.write("\"><span id=\"line\"></span>Line#</a></li>\n");
      out.write("          <li><a href=\"#\" class=\"scopes-toggle\"\n");
      out.write("            title=\"");
      out.print( "Toggle scopes window."
            );
      out.write("\"><span id=\"line\"></span>Scopes#</a></li><li><a\n");
      out.write("            href=\"#\" id=\"navigate\"\n");
      out.write("            title=\"Show or hide symbol list.\">");
      out.write("<span id=\"defbox\"></span>Navigate#</a></li>");

        }
        
      out.write("<li><a href=\"");
      out.print( context + Prefix.RAW_P + cfg.getUriEncodedPath()
            + (cfg.getRequestedRevision().length() == 0 ? "" : "?r=" + Util.URIEncode(cfg.getRequestedRevision()))
            );
      out.write("\"><span id=\"raw\"></span>Raw</a></li>\n");
      out.write("\t<li><a href=\"");
      out.print( context + Prefix.DOWNLOAD_P + cfg.getUriEncodedPath()
            + (cfg.getRequestedRevision().length() == 0 ? "" : "?r=" + Util.URIEncode(cfg.getRequestedRevision()))
            );
      out.write("\"><span id=\"download\"></span>Download</a></li>\n");
      out.write("\t");

    }
        
      out.write("<li><input type=\"text\" id=\"search\" name=\"q\" class=\"q\" />\n");
      out.write("            <input type=\"submit\" value=\"Search\" class=\"submit\" /></li>");

    Project proj = cfg.getProject();
    String[] vals = cfg.getSearchOnlyIn();
        
      out.write("<li><input type=\"checkbox\" name=\"path\" value='\"");
      out.print( vals[0]
            );
      out.write('"');
      out.write('\'');
      out.write(' ');
      out.print( vals[2] );
      out.write("/> only in <b>");
      out.print( vals[1] );
      out.write("</b></li>\n");
      out.write("    </ul>");

    if (proj != null) {
    
      out.write("<input type=\"hidden\" name=\"project\" value=\"");
      out.print(proj.getDescription());
      out.write("\" />");

    }

      out.write("<input type=\"hidden\" id=\"contextpath\" value=\"");
      out.print(request.getContextPath());
      out.write("\" />\n");
      out.write("</div>\n");
      out.write("        </form>\n");
      out.write("    </div>\n");
      out.write("<div id=\"content\">\n");
 
}
/* ---------------------- minisearch.jspf end --------------------- */


    }
}
{
    PageConfig cfg = PageConfig.get(request);
    String context = request.getContextPath();
    String path = cfg.getPath();
    History hist = null;
    if ((hist = (History) request.getAttribute("history.jsp-hist")) != null) {
        RuntimeEnvironment env = cfg.getEnv();
        String uriEncodedName = cfg.getUriEncodedPath();

        boolean striked = false;
        String userPage = env.getUserPage();
        String userPageSuffix = env.getUserPageSuffix();
        if (userPageSuffix == null) {
            // Set to empty string so we can append it to the URL
            // unconditionally later.
            userPageSuffix = "";
        }
        String bugPage = env.getBugPage();
        String bugRegex = env.getBugPattern();
        if (bugRegex == null || bugRegex.equals("")) {
            bugRegex = "\\b([12456789][0-9]{6})\\b";
        }
        Pattern bugPattern = Pattern.compile(bugRegex);
        String reviewPage = env.getReviewPage();
        String reviewRegex = env.getReviewPattern();
        if(reviewRegex == null || reviewRegex.equals("")) {
            reviewRegex = "\\b(\\d{4}/\\d{3})\\b";
        }
        Pattern reviewPattern = Pattern.compile(reviewRegex);
        Format df = new SimpleDateFormat("dd-MMM-yyyy");

        int revision2 = cfg.getIntParam("r2", -1) < 0 ? 0 : cfg.getIntParam("r2", -1);
        int revision1 = cfg.getIntParam("r1", -1) < revision2 ? revision2 + 1 : cfg.getIntParam("r1", -1);
        revision2 = revision2 >= hist.getHistoryEntries().size() ? hist.getHistoryEntries().size() - 1 : revision2;

        int start = cfg.getSearchStart();
        int max = cfg.getSearchMaxItems();

      out.write("<script type=\"text/javascript\">/* <![CDATA[ */\n");
      out.write("document.domReady.push(function() {domReadyHistory();});\n");
      out.write("/* ]]> */</script>\n");
      out.write("<!--[if IE]>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("  table#revisions tbody tr td p {\n");
      out.write("        word-break: break-all;\n");
      out.write("    }\n");
      out.write("</style>\n");
      out.write("<![endif]-->\n");
      out.write("<form action=\"");
      out.print( context + Prefix.DIFF_P + uriEncodedName );
      out.write("\">\n");
      out.write("<table class=\"src\" id=\"revisions\">\n");
      out.write("    <thead>\n");
      out.write("        <tr>\n");
      out.write("            <th>Revision ");

            if (hist.hasTags()) {
                
      out.write("<a href=\"#\" onclick=\"javascript: toggle_revtags(); return false;\">\n");
      out.write("                    <span class=\"revtags-hidden\">\n");
      out.write("                    (&lt;&lt;&lt; Hide revision tags)</span>\n");
      out.write("                    <span class=\"revtags\">\n");
      out.write("                    (Show revision tags &gt;&gt;&gt;)</span></a>");

            }
            
      out.write("</th>");

            if (!cfg.isDir()) {
            
      out.write("<th><input type=\"submit\" value=\" Compare \"/>\n");
      out.write("            ");
 if (hist.getHistoryEntries().size() > revision1 && revision1 >= 0) { 
      out.write("<input type=\"hidden\" id=\"input_r1\" name=\"r1\" value=\"");
      out.print( path + '@' + hist.getHistoryEntries().get(revision1).getRevision() );
      out.write("\" />\n");
      out.write("            ");
 } 
 if (hist.getHistoryEntries().size() > revision2 && revision2 >= 0) { 
      out.write("<input type=\"hidden\" id=\"input_r2\" name=\"r2\" value=\"");
      out.print( path + '@' + hist.getHistoryEntries().get(revision2).getRevision() );
      out.write("\" />\n");
      out.write("            ");
 } 
      out.write("</th>");

            }
            
      out.write("<th>Date</th>\n");
      out.write("            <th>Author</th>\n");
      out.write("            <th>Comments ");

            if (hist.hasFileList()) {
                
      out.write("<a href=\"#\" onclick=\"javascript: toggle_filelist(); return false;\">\n");
      out.write("                    <div class=\"filelist-hidden\">\n");
      out.write("                    (&lt;&lt;&lt; Hide modified files)</div>\n");
      out.write("                    <div class=\"filelist\">\n");
      out.write("                    (Show modified files &gt;&gt;&gt;)</div></a>");

            }
            
      out.write("</th>\n");
      out.write("        </tr>\n");
      out.write("    </thead>\n");
      out.write("    <tbody>\n");
      out.write("            ");

            int count=0;
            for (HistoryEntry entry : hist.getHistoryEntries(max, start)) {
                String rev = entry.getRevision();
                if (rev == null || rev.length() == 0) {
                    rev = "";
                }
                String tags = entry.getTags();

                if (tags != null) {
			int colspan;
			if (cfg.isDir())
				colspan = 4;
			else
				colspan = 5;
                    
      out.write("<tr class=\"revtags-hidden\">\n");
      out.write("            <td colspan=\"");
      out.print( colspan );
      out.write("\" class=\"revtags\">\n");
      out.write("                <b>Revision tags:</b> ");
      out.print( tags );
      out.write("</td>\n");
      out.write("        </tr><tr style=\"display: none;\"></tr>");

                }
    
      out.write("<tr>");

                if (cfg.isDir()) {
            
      out.write("<td>");
      out.print( rev );
      out.write("</td>");

                } else {
                    if (entry.isActive()) {
                        String rp = uriEncodedName;
            
      out.write("<td><a href=\"");
      out.print( context + Prefix.HIST_L + rp );
      out.write('#');
      out.print( rev );
      out.write("\"\n");
      out.write("                title=\"link to revision line\">#</a>\n");
      out.write("                <a href=\"");
      out.print( context + Prefix.XREF_P + rp + "?r=" + Util.URIEncode(rev) );
      out.write('"');
      out.write('>');
      out.print(
                    rev );
      out.write("</a></td>\n");
      out.write("            <td>");

                
      out.write("<input type=\"radio\"\n");
      out.write("                        data-revision-1=\"");
      out.print( (start + count) );
      out.write("\"\n");
      out.write("                        data-revision-2=\"");
      out.print( revision2 );
      out.write("\"\n");
      out.write("                        data-diff-revision=\"r1\"\n");
      out.write("                        data-revision-path=\"");
      out.print( path + '@' + hist.getHistoryEntries().get(start + count).getRevision());
      out.write("\"\n");
      out.write("                ");

                if (count + start > revision1 || (count + start > revision2 && count + start <= revision1 - 1)) {
                    // revision1 enabled
                } else if (count + start == revision1 ) {
                    // revision1 selected
                    
      out.write(" checked=\"checked\"");

                } else if( count + start <= revision2 ) {
                    // revision1 disabled
                    
      out.write(" disabled=\"disabled\" ");

                }
                
      out.write('/');
      out.write('>');


                
      out.write("<input type=\"radio\"\n");
      out.write("                        data-revision-1=\"");
      out.print( revision1 );
      out.write("\"\n");
      out.write("                        data-revision-2=\"");
      out.print( (start + count) );
      out.write("\"\n");
      out.write("                        data-diff-revision=\"r2\"\n");
      out.write("                        data-revision-path=\"");
      out.print( path + '@' + hist.getHistoryEntries().get(start + count).getRevision() );
      out.write("\"\n");
      out.write("                ");

                if( count + start < revision2 || (count + start > revision2 && count + start <= revision1 - 1) ) {
                    // revision2 enabled
                } else if( count + start == revision2 ) {
                    // revision2 selected
                    
      out.write(" checked=\"checked\" ");

                } else if (count + start >= revision1 ) {
                    // revision2 disabled
                    
      out.write(" disabled=\"disabled\" ");

                }
                
      out.write('/');
      out.write('>');

                
      out.write("</td>");

                    } else {
                        striked = true;
                
      out.write("<td><del>");
      out.print( rev );
      out.write("</del></td>\n");
      out.write("            <td></td>");

                    }
                }
            
      out.write("<td>");

                Date date = entry.getDate();
                if (date != null) {
            
      out.print( df.format(date) );

                }
                
      out.write("</td>\n");
      out.write("            <td>");

                String author = entry.getAuthor();
                if (author == null) {
                
      out.write("(no author)");

                } else if (userPage != null && userPage.length() > 0) {
		String alink = Util.getEmail(author);
                
      out.write("<a href=\"");
      out.print( userPage + Util.htmlize(alink) + userPageSuffix
                );
      out.write('"');
      out.write('>');
      out.print( Util.htmlize(author));
      out.write("</a>");

                } else {
                
      out.print( author );

                }
                
      out.write("</td>\n");
      out.write("            <td><a name=\"");
      out.print( rev );
      out.write("\"></a>");

                // revision message collapse threshold minimum of 10
                int summaryLength = Math.max(10, cfg.getRevisionMessageCollapseThreshold());
                String cout = Util.htmlize(entry.getMessage());

                if (bugPage != null && bugPage.length() > 0) {
                    cout = bugPattern.matcher(cout).replaceAll("<a href=\""
                        + bugPage + "$1\">$1</a>");
                }
                if (reviewPage != null && reviewPage.length() > 0) {
                    cout = reviewPattern.matcher(cout).replaceAll("<a href=\""
                        + reviewPage + "$1\">$1</a>");
                }
                
                boolean showSummary = false;
                String coutSummary = entry.getMessage();
                if (coutSummary.length() > summaryLength) {
                    showSummary = true;
                    coutSummary = coutSummary.substring(0, summaryLength - 1);
                    coutSummary = Util.htmlize(coutSummary);
                }

                if (showSummary) {
                    
      out.write("<p class=\"rev-message-summary\">");
      out.print( coutSummary );
      out.write("</p>\n");
      out.write("                    <p class=\"rev-message-full rev-message-hidden\">");
      out.print( cout );
      out.write("</p>\n");
      out.write("                    <p class=\"rev-message-toggle\" data-toggle-state=\"less\"><a class=\"rev-toggle-a\" href=\"#\">show more ... </a></p>\n");
      out.write("                    ");

                }
                else {
                     
      out.write("<p class=\"rev-message-full\">");
      out.print( cout );
      out.write("</p>");

                }

                Set<String> files = entry.getFiles();
                if (files != null) {
                
      out.write("<div class=\"filelist-hidden\"><br/>");

                    for (String ifile : files) {
                        String jfile = Util.stripPathPrefix(path, ifile);
                        if (rev == "") {
                
      out.write("<a class=\"h\" href=\"");
      out.print( context + Prefix.XREF_P + ifile );
      out.write('"');
      out.write('>');
      out.print( jfile );
      out.write("</a><br/>");

                        } else {
                
      out.write("<a class=\"h\" href=\"");
      out.print( context + Prefix.XREF_P + ifile );
      out.write('?');
      out.write('r');
      out.write('=');
      out.print( rev );
      out.write('"');
      out.write('>');
      out.print( jfile );
      out.write("</a><br/>");

                        }
                    }
                
      out.write("</div>");

                }
                
      out.write("</td>\n");
      out.write("        </tr>");

                count++;
            }
        
      out.write("</tbody>\n");
      out.write("    <tfoot>\n");
      out.write("        <tr>\n");
      out.write("            <td colspan=\"5\">\n");

    String slider = null;
    if ((slider = (String) request.getAttribute("history.jsp-slider")) != null) {
        // NOTE: shouldn't happen that it doesn't have this attribute
        
      out.write("<p class=\"slider\">");
      out.print( slider );
      out.write("</p>");

    }

      out.write("</td>\n");
      out.write("        </tr>\n");
      out.write("    </tfoot>\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("</form>");

            if (striked) {

      out.write("<p><b>Note:</b> No associated file changes are available for\n");
      out.write("revisions with strike-through numbers (eg. <del>1.45</del>)</p>");

            }

      out.write("<p class=\"rssbadge\"><a href=\"");
      out.print(context + Prefix.RSS_P + uriEncodedName
);
      out.write("\" title=\"RSS XML Feed of latest changes\"><span id=\"rssi\"></span></a></p>\n");
      out.write("\n");


    }
}
/* ---------------------- history.jsp end --------------------- */


/* ---------------------- foot.jspf start --------------------- */
{
    PageConfig cfg = PageConfig.get(request);

        
      out.write("<div id=\"footer\">\n");
      out.write("<p><a href=\"http://opengrok.github.com/OpenGrok/\"\n");
      out.write(" title=\"Served by OpenGrok\"><span id=\"fti\"></span></a></p>\n");
      out.write("<p>Indexes created ");
      out.print( cfg.getEnv().getDateForLastIndexRun() );
      out.write("</p>\n");
      out.write("    ");
      out.print( cfg.getEnv().getConfiguration().getFooterIncludeFileContent() );

    if (needAddDiv.contains(cfg.getPrefix())) {
        
      out.write("</div>");
 // #content
    }
    // #footer, #page:
    
      out.write("</div>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");

}
/* ---------------------- foot.jspf end --------------------- */

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
